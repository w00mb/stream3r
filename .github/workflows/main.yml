name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false # This is important for semantic-release to push tags

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Use the same Node.js version as in Dockerfile

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Install docker-compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose

    - name: Build Docker image
      run: docker compose build

    # Future Placeholder for Performance/Load Testing
    # - name: Run Performance Tests
    #   run: |
    #     echo "Placeholder for performance/load tests (e.g., k6, JMeter)"

    # Future Placeholder for Deployment
    # - name: Deploy to Production
    # #   run: |
    # #     echo "Placeholder for deployment steps"

  release: # New job for Semantic Release
    needs: build # Ensure release runs only after build passes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # Only run on master branch pushes

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false # This is important for semantic-release to push tags

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run Semantic Release
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # GitHub token for creating releases/tags
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # NPM token (optional, but good practice)

  deploy: # New job for Deployment
    needs: release # Ensure deployment runs only after release is created
    runs-on: ubuntu-latest
    environment: production # Use a GitHub Environment for protection rules (e.g., manual approval)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub (Example)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }} 
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull Docker image (Example)
      run: docker pull your-docker-repo/your-image-name:latest # Replace with your actual image name

    - name: Deploy to Production (Placeholder)
      run: |
        echo "Placeholder for actual deployment commands."
        echo "This could involve SSHing to a server, running kubectl, etc."
        echo "Image: your-docker-repo/your-image-name:latest"